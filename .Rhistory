by = .(school_size > 1000, fund_fees < fund_donation)]
by_condition
clean_school_data
by_condition <- clean_school_data[country == "KAZ",
.(mean(total_fun)),
by = .(school_size > 1000, fund_fees < fund_donation)]
by_condition
clean_school_data
by_condition <- clean_school_data[country == "KAZ",
.(mean(total_fun)),
by = .(school_size > 1000, staff_shortage > 1)]
by_condition
clean_school_data
clean_school_data[country == "ALB",
.(mean(enrol_boys), mean(enrol_girls)),
by = .(year, public_private)]
by_condition <- clean_school_data[country == "KAZ",
.(mean(total_fun)),
by = .(school_size , staff_shortage > 1)]
by_condition
by_condition <- clean_school_data[country == "ALB",
.(mean(total_fun)),
by = .(school_size , staff_shortage > 1)]
by_condition
clean_school_data
by_condition <- clean_school_data[country == "ALB",
.(mean(staff_shortage)),
by = .(fund_fees > 30)]
by_condition
clean_school_data
clean_school_data
by_condition
by_condition <- clean_school_data[country == "ALB",
.(mean(staff_shortage)),
by = .(fund_don > 30)]
clean_school_data
by_condition <- clean_school_data[country == "ALB",
.(mean(staff_shortage)),
by = .(fund_donation > 50)]
by_condition
clean_school_data
by_condition <- clean_school_data[country == "ALB",
.(mean(staff_shortage)),
by = .(fund_donation > 50, total_student<500)]
by_condition <- clean_school_data[country == "ALB",
.(mean(staff_shortage)),
by = .(fund_donation > 50, total_student < 500)]
clean_school_data
by_condition <- clean_school_data[country == "ALB",
.(mean(staff_shortage)),
by = .(fund_donation > 50, total_students < 500)]
by_condition
clean_school_data
mean_columns <- c("enrol_boys", "enrol_girls", "total_fun")
clean_school_data[country == "KAZ",
lapply(.SD, mean),
by = .(year),
.SDcols = mean_columns]
mean_columns <- c("enrol_boys", "enrol_girls", "total_fun")
selected_means <- clean_school_data[country == "KAZ",
lapply(.SD, mean),
by = .(year),
.SDcols = mean_columns]
selected_means
clean_school_data
mean_columns <- c("enrol_boys", "enrol_girls", "total_fun")
selected_means <- clean_school_data[country == "KAZ",
lapply(.SD, mean),
by = .(country),
.SDcols = mean_columns]
selected_means
mean_columns <- c("enrol_boys", "enrol_girls", "total_fun")
selected_means <- clean_school_data[country == 2018,
lapply(.SD, mean),
by = .(country),
.SDcols = mean_columns]
selected_means
mean_columns <- c("enrol_boys", "enrol_girls", "total_fun")
selected_means <- clean_school_data[year == 2018,
lapply(.SD, mean),
by = .(country),
.SDcols = mean_columns]
selected_means
clean_school_data
clean_school_data
mean_columns <- c("enrol_boys", "enrol_girls", "fund_fees")
selected_means <- clean_school_data[year == 2018,
lapply(.SD, mean),
by = .(country),
.SDcols = mean_columns]
selected_means
chaining <- clean_school_data[country == "LTU", .N, by = .(enrol_boys, enrol_girls)
][order(enrol_boys, -enrol_girls)
]
chaining
chaining <- clean_school_data[country == "LTU", .N, by = .(staff_shortage)
][order(-enrol_girls)
]
# What would if we do if we had to subset some columns and the order/arrange those columns? the first most obvious would be to first subset, and then take the result and work on it for the second task. However data.table allows us to avoid overwriting on the result, by chaining expressions:
chaining <- clean_school_data[country == "LTU", .mean(staff_shortage), by = .(enrol_boys, enrol_girls)
][order(-enrol_girls)
]
chaining <- clean_school_data[country == "LTU", .(mean(staff_shortage)), by = .(enrol_boys, enrol_girls)
][order(-enrol_girls)
]
chaining
clean_school_data
chaining <- clean_school_data[.(mean_staff_shortage = mean(staff_shortage)), by = .(public_private)
][order(-mean_staff_shortage)
]
chaining <- clean_school_data[.(mean_staff_shortage = mean(staff_shortage)), by = .(public_private)
]
chaining <- clean_school_data[.(mean_staff_shortage = mean(staff_shortage)), by = .(country)
]
chaining <- clean_school_data[.(mean_staff_shortage = mean(staff_shortage)), by = .(country)
]
chaining <- clean_school_data[,.(mean_staff_shortage = mean(staff_shortage)), by = .(country)
]
chaining
chaining <- clean_school_data[,.(mean_staff_shortage = mean(staff_shortage)), by = .(country)
][order(-mean_staff_shortage)
]
chaining
chaining
chaining <- clean_school_data[,
.(staff_shortage = mean(staff_shortage)),
by = .(country)
][order(-staff_shortage)
]
chaining
length(between_vector)
length(between_vector)
between_scaler <- male_albanian_studens[math %between% c(500, 600)]
inrange_scaler <- male_albanian_studens[math %inrange% c(500, 600)]
length(between_scaler) == length(inrange_scaler)
## using %between% and %inrange% with vectors
# %between% evaluates each row and returns T/F if the value of interest falls between the two vectors - the range defined by the two vectors varies for each row
between_vector <- male_albanian_studens[math %between% list(science, read)]
length(between_vector)
inrange_vector <- male_albanian_studens[math %inrange% list(science, read)]
length(inrange_vector)
between_scaler <- male_albanian_studens[math %between% c(500, 600)]
inrange_scaler <- male_albanian_studens[math %inrange% c(500, 600)]
length(between_scaler) == length(inrange_scaler)
## using %between% and %inrange% with vectors
# %between% evaluates each row and returns T/F if the value of interest falls between the two vectors - the range defined by the two vectors varies for each row
between_vector <- male_albanian_studens[math %between% list(science, read)]
length(between_vector)
# %inrange% takes the minimum from the lower-bound (first vector) and the maximum from the upper-bound (second vector), forms a static range and then evaluates whether the value in a given row falls within this range
inrange_vector <- male_albanian_studens[math %inrange% list(science, read)]
length(inrange_vector)
between_vector <- male_albanian_studens[math %between% .(science, read)]
length(between_vector)
# %inrange% takes the minimum from the lower-bound (first vector) and the maximum from the upper-bound (second vector), forms a static range and then evaluates whether the value in a given row falls within this range
inrange_vector <- male_albanian_studens[math %inrange% .(science, read)]
between_vector
between_vector
inrange_vector
# Spe
group_country <- school_data[, .(.N), by = .(country)]
group_country
# conditional grouping: by also accepts conditional expressions, i.e., create groups around conditions. The outcome is a matrix which shows all possible true/false combinations
by_condition <- clean_school_data[country == "ALB",
.(mean(staff_shortage)),
by = .(fund_donation > 50, total_students < 500)]
by_condition
# let's try to subset both in columns and rows:
cols_rows <- clean_school_data[country == "FRA" & year == 2018,
.(m_total = mean(total_students), m_fun = mean(total_fun))]
cols_rows
# combining all the operations we learnt so far:
all_combined <- clean_school_data[country == "KAZ",
.(mean(enrol_boys), mean(enrol_girls)),
by = .(year, public_private)]
# why are we seeing V1, V2?
all_combined <- clean_school_data[country == "KAZ",
.(mean(enrol_boys), mean(enrol_girls)),
by = .(year, public_private)]
all_combined
knitr::opts_chunk$set(echo = TRUE)
library("data.table")
library(nycflights13)
airports_data <- data.table(airports)
flights_data <- data.table(flights)
planes_data <- data.table(planes)
planes_data[seats %between% c(50, 100), mean(seats), by = .(manufacturer)]
flights_data[distance %inrange% list(c(0,500), c(1000, Inf))]
flights_data[distance %between% list(c(0,500), c(1000, Inf))]
flights_data[distance %inrange% list(c(0,500), c(1000, Inf))]
flights_data[distance %between% list(c(0,500), c(1000, Inf))]
flights_data[distance %inrange% list(c(0,500), c(1000, Inf))]
flights_data[distance %inrange% list(c(0,500), c(1000, Inf))]
knitr::opts_chunk$set(echo = TRUE)
# returning a data.table, wrapping with list()
student_data[, list(student_id, country, gender, read, science)]
pacman::p_load(data.table, learningtower, tidyverse)
# load the student data for 2018
load_student("2018")
# load the school data for all years
data("school")
student_data <- as.data.table(load_student("2018"))
school_data <- as.data.table(school)
## Let's inspect our datasets:
dim(student_data) # so our dataset has 612,004 rows/observations and 22 columns/variables. Awesome!
dim(school_data) # 109,756 rows and 13 columns. Great!
## when used with a scalar, %between% and %inrange% perform identically
between_scaler <- male_albanian_studens[math %between% c(500, 600)]
student_data[, list(student_id, country, gender, read, science)]
select_columns <- student_data[,.(student_id, country, gender, read, science)]
select_columns[1:5]
## when used with a scalar, %between% and %inrange% perform identically
between_scaler <- male_albanian_studens[math %between% c(500, 600)]
## when used with a scalar, %between% and %inrange% perform identically
between_scaler <- male_albanian_students[math %between% c(500, 600)]
## Sub-set all male students from Albania
male_albanian_studens <- student_data[country == "ALB" & gender == "male"]
## as you can see, a comma after the condition in "i"is not required
## but student_data[country == "ALB" & gender == "male",] would work just fine
## Sub-set all male students from Albania
male_albanian_studens <- student_data[country == "ALB" & gender == "male"]
## as you can see, a comma after the condition in "i"is not required
## but student_data[country == "ALB" & gender == "male",] would work just fine
## Order students in increasing order by their math score
incr_order <- male_albanian_students[order(math)]
## Sub-set all male students from Albania
male_albanian_students <- student_data[country == "ALB" & gender == "male"]
male_albanian_students
## as you can see, a comma after the condition in "i"is not required
## but student_data[country == "ALB" & gender == "male",] would work just fine
## Order students in increasing order by their math score
incr_order <- male_albanian_students[order(math)]
incr_order[1:5]
## Order students in decreasing order by their math score
decr_ord <- male_albanian_students[order(-math)]
decr_ord[1:5]
## when used with a scalar, %between% and %inrange% perform identically
between_scaler <- male_albanian_students[math %between% c(500, 600)]
inrange_scaler <- male_albanian_students[math %inrange% c(500, 600)]
length(between_scaler) == length(inrange_scaler)
## using %between% and %inrange% with vectors
# %between% evaluates each row and returns T/F if the value of interest falls between the two vectors - the range defined by the two vectors varies for each row
between_vector <- male_albanian_studens[math %between% list(science, read)]
between_vector # 188 rows, more stringent selection criterion
# %inrange% takes the minimum from the lower-bound (first vector) and the maximum from the upper-bound (second vector), forms a static range and then evaluates whether the value in a given row falls within this range
inrange_vector <- male_albanian_studens[math %inrange% list(science, read)]
inrange_vector # 3,182 rows, more relaxed criterion
# returning a vector
student_id_vector <- student_data[, student_id]
student_id_vector
# returning a data.table, wrapping with list()
select_columns <- student_data[, list(student_id, country, gender, read, science)]
select_columns
# returning a data.table, wrapping with .()
select_columns <- student_data[,.(student_id, country, gender, read, science)]
select_columns[1:5]
# drop selected columns
select_columns_short <- select_columns[, !c("read", "science")]
select_columns_short
renamed_cols <- student_data[, .(books = book, socio_eco_status = escs)]
head(renamed_cols)
# creating a new column
total_score <- male_albanian_students[,
total_score := read + science]
total_score
# creating a new column
total_score <- male_albanian_students[,
total_score := read + science]
total_score
# creating a new column
total_score <- male_albanian_students[,
total_score := read + science]
total_score
total_score <- male_albanian_students[,
total_score := read + science]
total_score
multiple_columns <- school_data[ , `:=` (
total_fun = fund_gov + fund_fees + fund_donation,  total_students = enrol_boys + enrol_girls)]
multiple_columns
# first we drop na-s to make our lives easier
clean_school_data <- na.omit(school_data)
# school with most enrolled boys
max_boys <- clean_school_data[, max(enrol_boys)]
max_boys
# school with fewest enrolled girls
min_girls <- clean_school_data[, min(enrol_girls)]
min_girls
# adding logical operators: total enrolled boys exceeding enrolled girls
more_boys_than_girls <- clean_school_data[, sum(enrol_boys < enrol_girls)]
more_boys_than_girls
#further sub-setting and computing:
subseting_computing <- clean_school_data[country== "FRA" & year == 2018, sum(total_students)]
# this type of operation length () occurs quite frequently, especially while grouping, therefore we can do the following:
clean_school_data[country== "FRA" & year == 2018, length(school_size)]
# special operator N
clean_school_data[country== "FRA" & year == 2018, .N]
# we see that we get the same result with 16 characters less!
# but please keep in mind .N is a special built-in variable that holds the number of observations in the current group.
# getting the total numbers
group_country <- school_data[, .(.N), by = .(country)]
group_country
# conditional grouping: by also accepts conditional expressions, i.e., create groups around conditions. The outcome is a matrix which shows all possible true/false combinations
by_condition <- clean_school_data[country == "ALB",
.(mean(staff_shortage)),
by = .(fund_donation > 50, total_students < 500)]
by_condition
# getting the total numbers
group_country <- school_data[, .(.N), by = .(country)]
group_country
# conditional grouping: by also accepts conditional expressions, i.e., create groups around conditions. The outcome is a matrix which shows all possible true/false combinations
by_condition <- clean_school_data[country == "ALB",
.(mean(staff_shortage)),
by = .(fund_donation > 50, total_students < 500)]
by_condition
# let's try to subset both in columns and rows:
cols_rows <- clean_school_data[country == "FRA" & year == 2018,
.(m_total = mean(total_students), m_fun = mean(total_fun))]
cols_rows
# combining all the operations we learnt so far:
all_combined <- clean_school_data[country == "KAZ",
.(mean(enrol_boys), mean(enrol_girls)),
by = .(year, public_private)]
all_combined
# why are we seeing V1, V2?
# repeated operations with .SD, .SDcols and lapply
# compute the mean of enrolled boys, enrolled girls and the share of funding from student fees (full percentage points) across countries in 2018
mean_columns <- c("enrol_boys", "enrol_girls", "fund_fees")
# specifying the columns to iterate over
selected_means <- clean_school_data[year == 2018,
lapply(.SD, mean),
by = .(country),
.SDcols = mean_columns]
selected_means
# creating multiple new columns
multiple_columns <- school_data[ , `:=` (
total_fun = fund_gov + fund_fees + fund_donation,  total_students = enrol_boys + enrol_girls)]
multiple_columns
multiple_columns
nrow(male_albanian_studens)
flights_data[distance %inrange% list(c(0,500), c(1000, Inf))]
select_columns_short
select_columns_short[1:5]
clean_school_data[, sum(enrol_girls)]
clean_school_data[, sum(enrol_boys)]
clean_school_data[, sum(enrol_girls)]
g <- clean_school_data[, sum(enrol_girls)]
b <- clean_school_data[, sum(enrol_boys)]
b-g
more_boys_than_girls <- clean_school_data[, sum(enrol_boys < enrol_girls)]
more_boys_than_girls
g-b
more_boys_than_girls
b-g
more_boys_than_girls <- clean_school_data[enrol_boys < enrol_girls, .(N)]
# adding logical operators: total enrolled boys exceeding enrolled girls
more_boys_than_girls <- clean_school_data[enrol_boys < enrol_girls, .N]
more_boys_than_girls
## reading a csv into a tibble
pacman::p_load(data.table, learningtower, tidyverse)
start <- Sys.time()
tb <- read_csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv")
end <- Sys.time()
print(end - start)
# reading a csv into a data.table
start <- Sys.time()
dt <- fread("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv")
end <- Sys.time()
print(end - start)
clean_school_data <- na.omit(school_data)
# school with most enrolled boys
max_boys <- clean_school_data[, max(enrol_boys)]
max_boys
# school with fewest enrolled girls
min_girls <- clean_school_data[, min(enrol_girls)]
min_girls
# adding logical operators: number of schools with more boys than girls
n_schooles_more_girls_than_boys <- clean_school_data[, sum(enrol_boys < enrol_girls)]
n_schooles_more_girls_than_boys
print(paste0("school with most enrolled boys: ", max_boys))
print(paste0("school with fewest enrolled girls ", min_girls))
print(paste0("number of schools with more girls than boys "), more_boys_than_girls)
# first we drop na-s to make our lives easier
clean_school_data <- na.omit(school_data)
# school with most enrolled boys
max_boys <- clean_school_data[, max(enrol_boys)]
# school with fewest enrolled girls
min_girls <- clean_school_data[, min(enrol_girls)]
# adding logical operators: number of schools with more boys than girls
n_schooles_more_girls_than_boys <- clean_school_data[, sum(enrol_boys < enrol_girls)]
print(paste0("school with most enrolled boys: ", max_boys))
print(paste0("school with fewest enrolled girls ", min_girls))
print(paste0("number of schools with more girls than boys "), n_schooles_more_girls_than_boys)
clean_school_data <- na.omit(school_data)
# school with most enrolled boys
max_boys <- clean_school_data[, max(enrol_boys)]
# school with fewest enrolled girls
min_girls <- clean_school_data[, min(enrol_girls)]
# adding logical operators: number of schools with more boys than girls
n_schooles_more_girls_than_boys <- clean_school_data[, sum(enrol_boys < enrol_girls)]
print(paste0("school with most enrolled boys: ", max_boys))
print(paste0("school with fewest enrolled girls ", min_girls))
print(paste0("number of schools with more girls than boys "), n_schooles_more_girls_than_boys)
# first we drop na-s to make our lives easier
clean_school_data <- na.omit(school_data)
# school with most enrolled boys
max_boys <- clean_school_data[, max(enrol_boys)]
# school with fewest enrolled girls
min_girls <- clean_school_data[, min(enrol_girls)]
# adding logical operators: number of schools with more boys than girls
n_schooles_more_girls_than_boys <- clean_school_data[, sum(enrol_boys < enrol_girls)]
print(paste0("school with most enrolled boys: ", max_boys))
print(paste0("school with fewest enrolled girls ", min_girls))
print(paste0("number of schools with more girls than boys ", n_schooles_more_girls_than_boys))
# descriptive analysis after sub-setting: total number of students in France in 2018
subseting_computing <- clean_school_data[country== "FRA" & year == 2018, sum(total_students)]
# first we drop na-s to make our lives easier
clean_school_data <- na.omit(school_data)
# school with most enrolled boys
max_boys <- clean_school_data[, max(enrol_boys)]
# school with fewest enrolled girls
min_girls <- clean_school_data[, min(enrol_girls)]
# adding logical operators: number of schools with more boys than girls
n_schooles_more_girls_than_boys <- clean_school_data[, sum(enrol_boys < enrol_girls)]
print(paste0("School with most enrolled boys: ", max_boys))
print(paste0("School with fewest enrolled girls ", min_girls))
print(paste0("Number of schools with more girls than boys ", n_schooles_more_girls_than_boys))
# descriptive analysis after sub-setting: total number of students in France in 2018
subseting_computing <- clean_school_data[country== "FRA" & year == 2018, sum(total_students)]
# first we drop na-s to make our lives easier
clean_school_data <- na.omit(school_data)
# school with most enrolled boys
max_boys <- clean_school_data[, max(enrol_boys)]
# school with fewest enrolled girls
min_girls <- clean_school_data[, min(enrol_girls)]
# adding logical operators: number of schools with more boys than girls
n_schooles_more_girls_than_boys <- clean_school_data[, sum(enrol_boys < enrol_girls)]
print(paste0("School with most enrolled boys: ", max_boys))
print(paste0("School with fewest enrolled girls ", min_girls))
print(paste0("Number of schools with more enrolled girls than boys ", n_schooles_more_girls_than_boys))
# descriptive analysis after sub-setting: total number of students in France in 2018
subseting_computing <- clean_school_data[country== "FRA" & year == 2018, sum(total_students)]
# first we drop na-s to make our lives easier
clean_school_data <- na.omit(school_data)
# school with most enrolled boys
max_boys <- clean_school_data[, max(enrol_boys)]
# school with fewest enrolled girls
min_girls <- clean_school_data[, min(enrol_girls)]
# adding logical operators: number of schools with more boys than girls
n_schools_more_girls_than_boys <- clean_school_data[, sum(enrol_boys < enrol_girls)]
print(paste0("School with most enrolled boys: ", max_boys))
print(paste0("School with fewest enrolled girls ", min_girls))
print(paste0("Number of schools with more enrolled girls than boys ", n_schools_more_girls_than_boys))
# descriptive analysis after sub-setting: total number of students in France in 2018
subseting_computing <- clean_school_data[country== "FRA" & year == 2018, sum(total_students)]
# first we drop na-s to make our lives easier
clean_school_data <- na.omit(school_data)
# school with most enrolled boys
max_boys <- clean_school_data[, max(enrol_boys)]
# school with fewest enrolled girls
min_girls <- clean_school_data[, min(enrol_girls)]
# adding logical operators: number of schools with more boys than girls
n_schools_more_girls <- clean_school_data[, sum(enrol_boys < enrol_girls)]
print(paste0("School with most enrolled boys: ", max_boys))
print(paste0("School with fewest enrolled girls ", min_girls))
print(paste0("Number of schools with more enrolled girls than boys ", n_schools_more_girls))
# descriptive analysis after sub-setting: total number of students in France in 2018
subseting_computing <- clean_school_data[country== "FRA" & year == 2018, sum(total_students)]
knitr::opts_chunk$set(echo = TRUE)
install.packages("devtools")
devtools::install_github("hadley/emo")
knitr::opts_chunk$set(echo = TRUE)
install.packages("devtools")
devtools::install_github("hadley/emo")
knitr::opts_chunk$set(echo = TRUE)
install.packages("devtools")
devtools::install_github("hadley/emo")
knitr::opts_chunk$set(echo = TRUE)
install.packages("devtools")
devtools::install_github("hadley/emo")
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(data.table, learningtower, tidyverse, devtools, hadley/emo)
knitr::opts_chunk$set(echo = TRUE)
install.packages("devtools")
devtools::install_github("hadley/emo")
install.packages("devtools")
knitr::opts_chunk$set(echo = TRUE)
install.packages("devtools")
devtools::install_github("hadley/emo")
flights_data [40:95]
flights_data [40:95]
flights_data [40:95]
pacman::p_load(data.table, nycflights13)
airports_data <- data.table(airports)
flights_data <- data.table(flights)
planes_data <- data.table(planes)
flights_data [40:95]
flights_data[(air_time) < 100][, .(flight_time = air_time)]
flights_data[(air_time) < 100][, .(-air_time)]
flights_data[(air_time) < 100][, -order(air_time)]
flights_data [40:95]
flights_data[(air_time) < 100][, -order(air_time)]
flights_data[(air_time) < 100][, order(-air_time)]
flights_data[(air_time) < 100][, order(air_time)]
flights_data[(air_time) < 100,][,order(air_time)]
flights_data[(air_time) < 100,]
flights_data[(air_time) < 100,][,order(air_time)]
flights_data[(air_time) < 100,][,.(order(air_time))]
flights_data[(air_time) < 100,][order(air_time)]
flights_data[(air_time) < 100,][order(-air_time)]
clean_flights_data <- na.omit(flights_data)
clean_flights_data[, .N, by = .(dest, arr_time)][order(-N)]
clean_flights_data <- na.omit(flights_data)
clean_flights_data[, .N, by = .(arr_time)][order(-N)]
