## Order students in decreasing order by their math score
decr_ord <- male_albanian_students[order(-math)]
decr_order[1:5]
## Order students in decreasing order by their math score
decr_ord <- male_albanian_students[order(-math)]
decr_ord[1:5]
between_scaler <- male_albanian_studens[math %between% c(12:100)]
between_scaler <- male_albanian_studens[math %between% .(12:100)]
a <- (100:150)
print(a)
between <- male_albanian_studens[math %between% .(a, b)]
a <- (100:150)
b <-(200:250)
between <- male_albanian_studens[math %between% .(a, b)]
a <- (100:150)
b <-(80:250)
85 %inrange% c(a, b)
102 %inrange% c(a, b)
a <- (100:150)
b <-(80:250)
102 %inrange% c(a, b)
a <- (100:150)
b <-(80:250)
102 %inrange% c(a, b)
a <- (100:150)
b <-(80:250)
150 %inrange% c(a, b)
length(between_scaler) = length(inrange_scaler)
between_scaler <- male_albanian_studens[math %between% c(500, 600)]
between
inrange_scaler <- male_albanian_studens[math %inrange% c(500, 600)]
inrange_scaler
length(between_scaler) = length(inrange_scaler)
inrange_scaler <- male_albanian_studens[math %inrange% c(500, 600)]
inrange_scaler
between_scaler <- male_albanian_studens[math %between% c(500, 600)]
between
between_scaler <- male_albanian_studens[math %between% c(500, 600)]
between_scaler
inrange_scaler <- male_albanian_studens[math %inrange% c(500, 600)]
inrange_scaler
between_scaler <- male_albanian_studens[math %between% c(500, 600)]
between_scaler
inrange_scaler <- male_albanian_studens[math %inrange% c(500, 600)]
inrange_scaler
length(between_scaler) == length(inrange_scaler)
between_vector <- male_albanian_studens[math %between% .(science, read)]
between_vector
inrange_vector <- male_albanian_studens[math %inrange% .(science, read)]
inrange_vector <- male_albanian_studens[math %inrange% list(science, read)]
inrange_vector
between_vector <- male_albanian_studens[math %between% list(science, read)]
between_vector
inrange_vector <- male_albanian_studens[math %inrange% list(science, read)]
inrange_vector
## When used with a scaler, %between% and %inrange% perform identically
between_scaler <- male_albanian_studens[math %between% c(500, 600)]
inrange_scaler <- male_albanian_studens[math %inrange% c(500, 600)]
length(between_scaler) == length(inrange_scaler)
between_vector <- male_albanian_studens[math %between% list(science, read)]
between_vector
inrange_vector <- male_albanian_studens[math %inrange% list(science, read)]
inrange_vector
## When used with a scaler, %between% and %inrange% perform identically
between_scaler <- male_albanian_studens[math %between% c(500, 600)]
inrange_scaler <- male_albanian_studens[math %inrange% c(500, 600)]
length(between_scaler) == length(inrange_scaler)
between_vector <- male_albanian_studens[math %between% list(science, read)]
between_vector
inrange_vector <- male_albanian_studens[math %inrange% list(science, read)]
inrange_vector
between_vector <- male_albanian_studens[math %between% list(science, read)]
between_vector[1:10]
between_vector <- male_albanian_studens[math %between% list(science, read)]
between_vector[1:5]
between_vector <- male_albanian_studens[math %between% list(science, read)]
between_vector[1:5]
inrange_vector <- male_albanian_studens[math %inrange% list(science, read)]
inrange_vector[1:5]
inrange_vector <- male_albanian_studens[math %inrange% list(science, read)]
inrange_vector[1:5]
between_vector <- male_albanian_studens[math %between% list(science, read)]
between_vector[1:5]
inrange_vector <- male_albanian_studens[math %inrange% list(science, read)]
inrange_vector[1:5]
student_data[, student_id] # returning a vector
student_data[, list(gender, science)] # returning a data.table
student_data[, .(gender, science)] # a short for
student_data[, student_id] # returning a vector
student_data[, list(student_id, gender, science)] # returning a data.table
student_data[, .(student_id, gender, science)] # a short for
student_data [, !list(car, dishwasher, television, computer_n)]
student_id_vector <- student_data[, student_id] # returning a vector
select_columns <- student_data[, list(student_id, country, gender, read, science)] # returning a data.table
select_columns <- [, .(student_id, country, gender, read, science)] # a short for
student_id_vector <- student_data[, student_id] # returning a vector
select_columns <- student_data[, list(student_id, country, gender, read, science)] # returning a data.table
select_columns <- student_data[, .(student_id, country, gender, read, science)] # a short for
select_columns <- select_columns[, !list(read, science)]
student_id_vector <- student_data[, student_id] # returning a vector
select_columns <- student_data[, list(student_id, country, gender, read, science)] # returning a data.table
select_columns <- student_data[, .(student_id, country, gender, read, science)] # a short for
select_columns <- select_columns[, !.(read, science)]
select_columns <- select_columns[, !(read, science)]
select_columns <- select_columns[, !c("read", "science"), with=FALSE]
select_columns
select_columns <- select_columns[, !c("read", "science")]
select_columns
select_columns <- select_columns[, !c(read, science)]
# returning a vector
student_id_vector <- student_data[, student_id]
# wrapping as list to return a data.table
select_columns <- student_data[, list(student_id, country, gender, read, science)]
# a shorter version for wrapping as a list
select_columns <- student_data[, .(student_id, country, gender, read, science)]
select_columns
select_columns[1:5]
total_science <- student_data[, total_science := math + science]
total_science
total_science <- student_data[, total_science := math + science]
total_science
total_science
total_science[1:5]
total_science <- male_albanian_students[,
total_science := math + science]
total_science[1:5]
total_score <- male_albanian_students[,
total_score := read + science]
total_science[1:5]
total_score <- male_albanian_students[,
total_score := read + science]
total_score[1:5]
total_score <- male_albanian_students[,
total_score := read + science]
total_score[1:5]
male_albanian_students <- male_albanian_studens[, .(country, student_id, gender, math, read, science)]
male_albanian_studens
male_albanian_studens[1:5]
# returning a vector
student_id_vector <- student_data[, student_id]
# wrapping as list to return a data.table
select_columns <- student_data[, list(student_id, country, gender, read, science)]
# a shorter version for wrapping as a list
select_columns <- student_data[,
.(student_id, country, gender, read, science)]
select_columns[1:5]
# drop selected columns
select_columns_short <- select_columns[, !c("read", "science")]
select_columns_short
total_score <- male_albanian_students[,
total_score := read + science]
total_score[1:5]
view(school_data[ , `:=` (total_fun = fund_gov + fund_fees + fund_donation, total_students = enrol_boys + enrol_girls)])
view(school_data[ , `:=` (total_fun = fund_gov + fund_fees + fund_donation, total_students = enrol_boys + enrol_girls)])
# Logical operators and computing?
computing <- clean_school_data[, enrolled_students = sum(enrol_boys < enrol_girls)]
# first we drop na-s to allow us better computing:
clean_school_data <- na.omit(school_data)
# Logical operators and computing?
computing <- clean_school_data[, enrolled_students = sum(enrol_boys < enrol_girls)]
# first we drop na-s to allow us better computing:
clean_school_data <- na.omit(school_data)
# Logical operators and computing?
computing <- clean_school_data[, enrolled_students = sum(enrol_boys < enrol_girls)]
# Logical operators and computing?
computing <- clean_school_data[, enrolled_students = sum(enrol_boys < enrol_girls)]
# first we drop na-s to allow us better computing:
clean_school_data <- na.omit(school_data)
# Logical operators and computing?
computing <- clean_school_data[, enrolled_students = sum(enrol_boys + enrol_girls)]
# first we drop na-s to allow us better computing:
clean_school_data <- na.omit(school_data)
# Logical operators and computing?
computing <- clean_school_data[, sum(enrol_boys < enrol_girls)]
#further subsetting and computing:
subseting_computing <- clean_school_data[country== "FRA" & year == 2018, sum(total_students)]
# first we drop na-s to allow us better computing:
clean_school_data <- na.omit(school_data)
# Logical operators and computing?
computing <- clean_school_data[, total=sum(enrol_boys < enrol_girls)]
# first we drop na-s to allow us better computing:
clean_school_data <- na.omit(school_data)
# Logical operators and computing?
computing <- clean_school_data[, sum(enrol_boys < enrol_girls)]
#further subsetting and computing:
subseting_computing <- clean_school_data[country== "FRA" & year == 2018, sum(total_students)]
# Logical operators and computing?
computing <- clean_school_data[, sum(enrol_boys < enrol_girls)]
computing
# let's try to subset both in columns and rows:
cols_rows <- clean_school_data[country == "FRA" & year == 2018,
.(m_total = mean(total_students), m_fun = mean(total_fun))]
# we have a special symbol .N in data.table..let's see what it does:
clean_school_data[country== "FRA" & year == 2018, length(school_size)] # this type of operation length () occurs quite frequently, especially while grouping, therefore we can do the following:
clean_school_data[country== "FRA" & year == 2018, .N] # we see that we get the same result with 16 characters less! (but please keep in mind .N is a special built-in variable that holds the number of observations in the current group.)
# using all the operations learned so far:
clean_school_data[country == "KAZ",
.(mean(enrol_boys), mean(enrol_girls)),
by = .(year, public_private)]
# why are we seeing V1, V2?
# special operator N
clean_school_data[country== "FRA" & year == 2018, .N]
clean_school_data
# special operator N
N = clean_school_data[country== "FRA" & year == 2018, .N]
N
# special operator N
french_schools_2018 = clean_school_data[country== "FRA" & year == 2018, .N]
french_schools_2018
KAZ <- clean_school_data[country == "KAZ",
.(mean(enrol_boys), mean(enrol_girls)),
by = .(year, public_private)]
KAZ
multiple_columns <- school_data[ , `:=` (total_fun = fund_gov + fund_fees + fund_donation, total_students = enrol_boys + enrol_girls)]
multiple_columns <- school_data[ , `:=` (
total_fun = fund_gov + fund_fees + fund_donation,  total_students = enrol_boys + enrol_girls)]
multiple_columns
multiple_columns
multiple_columns[1:5]
clean_school_data
max_boys<- clean_school_data[, max(enrol_boys)]
max_boys
clean_school_data
total_more_boys <- clean_school_data[, sum(enrol_boys < enrol_girls)]
# school with most enrolled boys
max_boys<- clean_school_data[, max(enrol_boys)]
# school with fewest enrolled girls
min_girls <- clean_school_data[, max(enrol_girls)]
# Logical operators and computing?
logical <- clean_school_data[, sum(enrol_boys < enrol_girls)]
max_boys, min_girls, logical
print(max_boys, min_girls, logical)
logical <- clean_school_data[, sum(enrol_boys < enrol_girls)]
logical
print(max_boys, min_girls, logical)
print(max_boys)
# school with fewest enrolled girls
min_girls <- clean_school_data[, max(enrol_girls)]
print(max_boys, min_girls)
print(max_boys)
print(min_girls)
print(logical)
# school with most enrolled boys
max_boys <- clean_school_data[, max(enrol_boys)]
# 8.500
# school with fewest enrolled girls
min_girls <- clean_school_data[, min(enrol_girls)]
# Logical operators and computing?
logical <- clean_school_data[, sum(enrol_boys < enrol_girls)]
logical
print(max_boys)
print(min_girls)
print(logical)
# first we drop na-s to allow us better computing:
clean_school_data <- na.omit(school_data)
clean_school_data
# school with most enrolled boys
max_boys <- clean_school_data[, max(enrol_boys)]
# 8.500
# school with fewest enrolled girls
min_girls <- clean_school_data[, min(enrol_girls)]
# Logical operators and computing?
logical <- clean_school_data[, sum(enrol_boys < enrol_girls)]
print(max_boys)
print(min_girls)
print(logical)
# school with fewest enrolled girls
min_girls <- clean_school_data[, min(enrol_girls)]
min_girls
print(paste0("max_boys:", max_boys))
print(paste0("min_girls:", min_girls))
print(paste0("more boys than girls:"), more_boys_than_girls)
# Logical operators and computing?
more_boys_than_girls <- clean_school_data[, sum(enrol_boys < enrol_girls)]
print(paste0("max_boys: ", max_boys))
print(paste0("min_girls: ", min_girls))
print(paste0("more boys than girls:"), more_boys_than_girls)
more_boys_than_girls
print(paste0("max_boys: ", max_boys))
print(paste0("min_girls: ", min_girls))
print(paste0("more boys than girls:"), more_boys_than_girls))
print(paste0("max_boys: ", max_boys))
print(paste0("min_girls: ", min_girls))
print(paste0("more boys than girls:", more_boys_than_girls))
print(paste0("School with most enrolled boys: ", max_boys))
print(paste0("School with fewest enrolled girls: ", min_girls))
print(paste0("Enrolled boys exceeding enrolled girls", more_boys_than_girls))
print(paste0("School with most enrolled boys: ", max_boys))
print(paste0("School with fewest enrolled girls: ", min_girls))
print(paste0("Enrolled boys exceeding enrolled girls: ", more_boys_than_girls))
# school with most enrolled boys
max_boys <- clean_school_data[, max(enrol_boys)]
# school with fewest enrolled girls
min_girls <- clean_school_data[, min(enrol_girls)]
# total enrolled boys exceeding enrolled girls
more_boys_than_girls <- clean_school_data[, sum(enrol_boys < enrol_girls)]
more_boys_than_girls
print(paste0("School with most enrolled boys: ", max_boys))
print(paste0("School with fewest enrolled girls: ", min_girls))
print(paste0("Enrolled boys exceeding enrolled girls: ", more_boys_than_girls))
print(paste0("School with most enrolled boys: ", max_boys))
print(paste0("School with fewest enrolled girls: ", min_girls))
print(paste0("Enrolled boys exceeding enrolled girls: ", more_boys_than_girls))
# special operator N
french_schools_2018 = clean_school_data[country== "FRA" & year == 2018, .N]
french_schools_2018 = clean_school_data[country== "FRA" & year == 2018, .N]
french_schools_2018
french_schools_2018 <-  clean_school_data[country== "FRA" & year == 2018, .N]
french_schools_2018
clean_school_data
clean_school_data[country == "KAZ",
.(mean(fund_gov),
by = .(enrol_boys > enrol_girls)]
compute <- clean_school_data[country == "KAZ",
.(mean(fund_gov)),
by = .(enrol_boys > enrol_girls)]
compute
clean_school_data
by_condition <- clean_school_data[country == "KAZ",
.(mean(fund_gov)),
by = .(enrol_boys > enrol_girls, fund_fees > fund_donation)]
by_condition
by_condition <- clean_school_data[country == "KAZ",
.(mean(total_fun)),
by = .(enrol_boys > enrol_girls, fund_fees > fund_donation)]
by_condition
clean_school_data
by_condition <- clean_school_data[country == "KAZ",
.(mean(total_fun)),
by = .(school_size > 1000, fund_fees > fund_donation)]
by_condition
by_condition <- clean_school_data[country == "KAZ",
.(mean(total_fun)),
by = .(school_size > 1000, fund_fees < fund_donation)]
by_condition
clean_school_data
by_condition <- clean_school_data[country == "KAZ",
.(mean(total_fun)),
by = .(school_size > 1000, fund_fees < fund_donation)]
by_condition
clean_school_data
by_condition <- clean_school_data[country == "KAZ",
.(mean(total_fun)),
by = .(school_size > 1000, staff_shortage > 1)]
by_condition
clean_school_data
clean_school_data[country == "ALB",
.(mean(enrol_boys), mean(enrol_girls)),
by = .(year, public_private)]
by_condition <- clean_school_data[country == "KAZ",
.(mean(total_fun)),
by = .(school_size , staff_shortage > 1)]
by_condition
by_condition <- clean_school_data[country == "ALB",
.(mean(total_fun)),
by = .(school_size , staff_shortage > 1)]
by_condition
clean_school_data
by_condition <- clean_school_data[country == "ALB",
.(mean(staff_shortage)),
by = .(fund_fees > 30)]
by_condition
clean_school_data
clean_school_data
by_condition
by_condition <- clean_school_data[country == "ALB",
.(mean(staff_shortage)),
by = .(fund_don > 30)]
clean_school_data
by_condition <- clean_school_data[country == "ALB",
.(mean(staff_shortage)),
by = .(fund_donation > 50)]
by_condition
clean_school_data
by_condition <- clean_school_data[country == "ALB",
.(mean(staff_shortage)),
by = .(fund_donation > 50, total_student<500)]
by_condition <- clean_school_data[country == "ALB",
.(mean(staff_shortage)),
by = .(fund_donation > 50, total_student < 500)]
clean_school_data
by_condition <- clean_school_data[country == "ALB",
.(mean(staff_shortage)),
by = .(fund_donation > 50, total_students < 500)]
by_condition
clean_school_data
mean_columns <- c("enrol_boys", "enrol_girls", "total_fun")
clean_school_data[country == "KAZ",
lapply(.SD, mean),
by = .(year),
.SDcols = mean_columns]
mean_columns <- c("enrol_boys", "enrol_girls", "total_fun")
selected_means <- clean_school_data[country == "KAZ",
lapply(.SD, mean),
by = .(year),
.SDcols = mean_columns]
selected_means
clean_school_data
mean_columns <- c("enrol_boys", "enrol_girls", "total_fun")
selected_means <- clean_school_data[country == "KAZ",
lapply(.SD, mean),
by = .(country),
.SDcols = mean_columns]
selected_means
mean_columns <- c("enrol_boys", "enrol_girls", "total_fun")
selected_means <- clean_school_data[country == 2018,
lapply(.SD, mean),
by = .(country),
.SDcols = mean_columns]
selected_means
mean_columns <- c("enrol_boys", "enrol_girls", "total_fun")
selected_means <- clean_school_data[year == 2018,
lapply(.SD, mean),
by = .(country),
.SDcols = mean_columns]
selected_means
clean_school_data
clean_school_data
mean_columns <- c("enrol_boys", "enrol_girls", "fund_fees")
selected_means <- clean_school_data[year == 2018,
lapply(.SD, mean),
by = .(country),
.SDcols = mean_columns]
selected_means
chaining <- clean_school_data[country == "LTU", .N, by = .(enrol_boys, enrol_girls)
][order(enrol_boys, -enrol_girls)
]
chaining
chaining <- clean_school_data[country == "LTU", .N, by = .(staff_shortage)
][order(-enrol_girls)
]
# What would if we do if we had to subset some columns and the order/arrange those columns? the first most obvious would be to first subset, and then take the result and work on it for the second task. However data.table allows us to avoid overwriting on the result, by chaining expressions:
chaining <- clean_school_data[country == "LTU", .mean(staff_shortage), by = .(enrol_boys, enrol_girls)
][order(-enrol_girls)
]
chaining <- clean_school_data[country == "LTU", .(mean(staff_shortage)), by = .(enrol_boys, enrol_girls)
][order(-enrol_girls)
]
chaining
clean_school_data
chaining <- clean_school_data[.(mean_staff_shortage = mean(staff_shortage)), by = .(public_private)
][order(-mean_staff_shortage)
]
chaining <- clean_school_data[.(mean_staff_shortage = mean(staff_shortage)), by = .(public_private)
]
chaining <- clean_school_data[.(mean_staff_shortage = mean(staff_shortage)), by = .(country)
]
chaining <- clean_school_data[.(mean_staff_shortage = mean(staff_shortage)), by = .(country)
]
chaining <- clean_school_data[,.(mean_staff_shortage = mean(staff_shortage)), by = .(country)
]
chaining
chaining <- clean_school_data[,.(mean_staff_shortage = mean(staff_shortage)), by = .(country)
][order(-mean_staff_shortage)
]
chaining
chaining
chaining <- clean_school_data[,
.(staff_shortage = mean(staff_shortage)),
by = .(country)
][order(-staff_shortage)
]
chaining
length(between_vector)
length(between_vector)
between_scaler <- male_albanian_studens[math %between% c(500, 600)]
inrange_scaler <- male_albanian_studens[math %inrange% c(500, 600)]
length(between_scaler) == length(inrange_scaler)
## using %between% and %inrange% with vectors
# %between% evaluates each row and returns T/F if the value of interest falls between the two vectors - the range defined by the two vectors varies for each row
between_vector <- male_albanian_studens[math %between% list(science, read)]
length(between_vector)
inrange_vector <- male_albanian_studens[math %inrange% list(science, read)]
length(inrange_vector)
between_scaler <- male_albanian_studens[math %between% c(500, 600)]
inrange_scaler <- male_albanian_studens[math %inrange% c(500, 600)]
length(between_scaler) == length(inrange_scaler)
## using %between% and %inrange% with vectors
# %between% evaluates each row and returns T/F if the value of interest falls between the two vectors - the range defined by the two vectors varies for each row
between_vector <- male_albanian_studens[math %between% list(science, read)]
length(between_vector)
# %inrange% takes the minimum from the lower-bound (first vector) and the maximum from the upper-bound (second vector), forms a static range and then evaluates whether the value in a given row falls within this range
inrange_vector <- male_albanian_studens[math %inrange% list(science, read)]
length(inrange_vector)
between_vector <- male_albanian_studens[math %between% .(science, read)]
length(between_vector)
# %inrange% takes the minimum from the lower-bound (first vector) and the maximum from the upper-bound (second vector), forms a static range and then evaluates whether the value in a given row falls within this range
inrange_vector <- male_albanian_studens[math %inrange% .(science, read)]
between_vector
between_vector
inrange_vector
# Spe
group_country <- school_data[, .(.N), by = .(country)]
group_country
# conditional grouping: by also accepts conditional expressions, i.e., create groups around conditions. The outcome is a matrix which shows all possible true/false combinations
by_condition <- clean_school_data[country == "ALB",
.(mean(staff_shortage)),
by = .(fund_donation > 50, total_students < 500)]
by_condition
# let's try to subset both in columns and rows:
cols_rows <- clean_school_data[country == "FRA" & year == 2018,
.(m_total = mean(total_students), m_fun = mean(total_fun))]
cols_rows
# combining all the operations we learnt so far:
all_combined <- clean_school_data[country == "KAZ",
.(mean(enrol_boys), mean(enrol_girls)),
by = .(year, public_private)]
# why are we seeing V1, V2?
all_combined <- clean_school_data[country == "KAZ",
.(mean(enrol_boys), mean(enrol_girls)),
by = .(year, public_private)]
all_combined
